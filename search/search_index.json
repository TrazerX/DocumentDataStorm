{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Datastorm Engine Installation and building Install the engine from https://github.com/TrazerX/Datastorm-Engine . Open the DatastormEngine.sln file. Build the engine. How to make a game? To make a game you need to make it in AppWindow class (It is the main game). AppWindow.cpp has a default app in it. There is objects in OnCreate() function which as m_mesh, m_sky_mesh and m_plane_mesh. You can add a mesh by adding MeshPtr to AppWindow.h or you can delete them in onCreate() function. AppWindow.h ... private: MeshPtr m_mesh; AppWindow.cpp OnCreate() Window::onCreate(); { InputSystem::get()->addListener(this); m_play_state = true; InputSystem::get()->showCursor(false); //Texture m_wall_tex = GraphicsEngine::get()->getTextureManager()->createTextureFromFile(L\"..\\\\Assets\\\\Textures\\\\wall.jpg\"); m_mesh = GraphicsEngine::get()->getMeshManager()->createMeshFromFile(L\"..\\\\Assets\\\\Meshes\\\\sphere.obj\"); RECT rc = this->getClientWindowRect(); m_swap_chain = GraphicsEngine::get()->getRenderSystem()->createSwapChain(this->m_hwnd, rc.right - rc.left, rc.bottom - rc.top); m_world_cam.setTranslation(Vector3D(0, 0, -1)); m_mat = GraphicsEngine::get()->createMaterial(L\"PointLightVertexShader.hlsl\", L\"PointLightPixelShader.hlsl\"); m_mat->addTexture(m_wall_tex); m_mat->setCullMode(CULL_MODE_BACK); m_world_cam.setTranslation(Vector3D(0, 0, -2)); } We will talk about m_wall_tex and m_mat later. You can create textures by adding TexturePtr to AppWindow.h or you can delete them like Meshes. AppWindow.h ... private: TexturePtr m_wall_tex; AppWindow.cpp OnCreate() ... m_wall_tex = GraphicsEngine::get()->getTextureManager()->createTextureFromFile(L\"..\\\\Assets\\\\Textures\\\\wall.jpg\"); You can delete or add material to AppWindow.h script then use them in onCreate() function. Here is the example: AppWindow.h ... private: MaterialPtr m_mat; AppWindow.cpp m_mat = GraphicsEngine::get()->createMaterial(L\"PointLightVertexShader.hlsl\", L\"PointLightPixelShader.hlsl\"); m_mat->addTexture(m_wall_tex); m_mat->setCullMode(CULL_MODE_BACK); ... Now to render the model. We need to use updateModel() function and drawMesh() in AppWindow::render() function AppWindow.cpp ... void AppWindow::render() { //CLEAR THE RENDER TARGET GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->clearRenderTargetColor(this->m_swap_chain, 0, 0.3f, 0.4f, 1); //SET VIEWPORT OF RENDER TARGET IN WHICH WE HAVE TO DRAW RECT rc = this->getClientWindowRect(); GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setViewportSize(rc.right - rc.left, rc.bottom - rc.top); //COMPUTE TRANSFORM MATRICES update(); //RENDER THE MODEL updateModel(Vector3D(0, -1, 1), m_mat); drawMesh(m_plane_mesh, m_mat); //REFRESH WITH TIME m_swap_chain->present(true); m_old_delta = m_new_delta; m_new_delta = ::GetTickCount(); m_delta_time = (m_old_delta) ? ((m_new_delta - m_old_delta) / 1000.0f) : 0; m_time += m_delta_time; } So it should be like this. AppWindow.h #pragma once #include \"Window.h\" #include \"GraphicsEngine.h\" #include \"SwapChain.h\" #include \"DeviceContext.h\" #include \"VertexBuffer.h\" #include \"IndexBuffer.h\" #include \"ConstantBuffer.h\" #include \"VertexShader.h\" #include \"PixelShader.h\" #include \"InputListener.h\" #include \"Matrix4x4.h\" class AppWindow : public Window, public InputListener { public: AppWindow(); ~AppWindow(); // Inherited via Window virtual void onCreate() override; virtual void onUpdate() override; virtual void onDestroy() override; virtual void onFocus() override; virtual void onKillFocus() override; virtual void onSize() override; // Inherited via InputListener virtual void onKeyDown(int key) override; virtual void onKeyUp(int key) override; virtual void onMouseMove(const Point& mouse_pos) override; virtual void onLeftMouseDown(const Point& mouse_pos) override; virtual void onLeftMouseUp(const Point& mouse_pos) override; virtual void onRightMouseDown(const Point& mouse_pos) override; virtual void onRightMouseUp(const Point& mouse_pos) override; public: void render(); void update(); void updateModel(Vector3D position, const MaterialPtr& material); void updateCamera(); void updateSkyBox(); void updateLight(); void drawMesh(const MeshPtr& mesh, MaterialPtr& material); private: SwapChainPtr m_swap_chain; VertexShaderPtr m_vs; PixelShaderPtr m_ps; PixelShaderPtr m_sky_ps; ConstantBufferPtr m_cb; ConstantBufferPtr m_sky_cb; TexturePtr m_wall_tex; MeshPtr m_mesh; MaterialPtr m_mat; private: long m_old_delta; long m_new_delta; float m_delta_time; float m_delta_pos; float m_delta_scale; float m_delta_rot; float m_rot_x = 0.0f; float m_rot_y = 0.0f; float m_light_rot_y = 0.0f; float m_scale_cube = 1; float m_forward = 0.0f; float m_rightward = 0.0f; bool cull = true; Matrix4x4 m_world_cam; Matrix4x4 m_view_cam; Matrix4x4 m_proj_cam; float m_time = 0.0f; float m_light_radius = 4.0f; float m_attenuation = 2.0f; bool m_anim = false; bool m_play_state = false; bool m_fullscreen_state = false; Vector4D m_light_position; }; AppWindow.cpp #include \"AppWindow.h\" #include <Windows.h> #include \"Vector3D.h\" #include \"Vector2D.h\" #include \"Matrix4x4.h\" #include \"InputSystem.h\" #include \"Mesh.h\" struct vertex { Vector3D position; Vector2D texcoord; }; __declspec(align(16)) struct constant { Matrix4x4 m_world; Matrix4x4 m_view; Matrix4x4 m_proj; Vector4D m_light_direction; Vector4D m_camera_position; Vector4D m_light_position = Vector4D(0, 1, 0, 0); float m_light_radius = 4.0f; float m_time = 0.0f; }; AppWindow::AppWindow() { } void AppWindow::render() { //CLEAR THE RENDER TARGET GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->clearRenderTargetColor(this->m_swap_chain, 0, 0.3f, 0.4f, 1); //SET VIEWPORT OF RENDER TARGET IN WHICH WE HAVE TO DRAW RECT rc = this->getClientWindowRect(); GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setViewportSize(rc.right - rc.left, rc.bottom - rc.top); //COMPUTE TRANSFORM MATRICES update(); updateModel(Vector3D(0, -1, 1), m_mat); drawMesh(m_mesh, m_mat); m_swap_chain->present(true); m_old_delta = m_new_delta; m_new_delta = ::GetTickCount(); m_delta_time = (m_old_delta) ? ((m_new_delta - m_old_delta) / 1000.0f) : 0; m_time += m_delta_time; } void AppWindow::update() { updateCamera(); updateLight(); updateSkyBox(); } void AppWindow::updateModel(Vector3D position, const MaterialPtr& material) { constant cc; Matrix4x4 m_light_rot_matrix; m_light_rot_matrix.setIdentity(); m_light_rot_matrix.setRotationY(m_light_rot_y); cc.m_world.setIdentity(); cc.m_world.setTranslation(position); cc.m_view = m_view_cam; cc.m_proj = m_proj_cam; cc.m_camera_position = m_world_cam.getTranslation(); cc.m_light_position = m_light_position; cc.m_light_radius = m_light_radius; cc.m_light_direction = m_light_rot_matrix.getZDirection(); cc.m_time = m_time; material->setData(&cc, sizeof(constant)); } void AppWindow::updateCamera() { Matrix4x4 world_cam, temp; world_cam.setIdentity(); temp.setIdentity(); temp.setRotationX(m_rot_x); world_cam *= temp; temp.setIdentity(); temp.setRotationY(m_rot_y); world_cam *= temp; Vector3D new_pos = m_world_cam.getTranslation() + world_cam.getZDirection() * (m_forward * 0.05f); new_pos = new_pos + world_cam.getXDirection() * (m_rightward * 0.05f); world_cam.setTranslation(new_pos); m_world_cam = world_cam; world_cam.inverse(); m_view_cam = world_cam; int width = (this->getClientWindowRect().right - this->getClientWindowRect().left); int height = (this->getClientWindowRect().bottom - this->getClientWindowRect().top); m_proj_cam.setPerspectiveFovLH(1.57f, ((float)width / (float)height), 0.001f, 100.0f); } void AppWindow::updateSkyBox() { constant cc; cc.m_world.setIdentity(); cc.m_world.setScale(Vector3D(100.0f, 100.0f, 100.0f)); cc.m_world.setTranslation(m_world_cam.getTranslation()); cc.m_view = m_view_cam; cc.m_proj = m_proj_cam; } void AppWindow::updateLight() { m_light_rot_y += 1.57f * m_delta_time; float dist_from_origin = 3.0f; m_light_position = Vector4D(cos(m_light_rot_y) * dist_from_origin, 1.1f, sin(m_light_rot_y) * dist_from_origin, 1.0f); } void AppWindow::drawMesh(const MeshPtr& mesh, MaterialPtr& material) { GraphicsEngine::get()->setMaterial(material); //SET THE VERTICES OF THE TRIANGLE TO DRAW GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setVertexBuffer(mesh->getVertexBuffer()); //SET THE INDICES OF THE TRIANGLE TO DRAW GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setIndexBuffer(mesh->getIndexBuffer()); // FINALLY DRAW THE TRIANGLE GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->drawIndexedTriangleList(mesh->getIndexBuffer()->getSizeIndexList(), 0, 0); } AppWindow::~AppWindow() { } void AppWindow::onCreate() { Window::onCreate(); InputSystem::get()->addListener(this); m_play_state = true; InputSystem::get()->showCursor(false); m_wall_tex = GraphicsEngine::get()->getTextureManager()->createTextureFromFile(L\"..\\\\Assets\\\\Textures\\\\wall.jpg\"); m_mesh = GraphicsEngine::get()->getMeshManager()->createMeshFromFile(L\"..\\\\Assets\\\\Meshes\\\\sphere.obj\"); RECT rc = this->getClientWindowRect(); m_swap_chain = GraphicsEngine::get()->getRenderSystem()->createSwapChain(this->m_hwnd, rc.right - rc.left, rc.bottom - rc.top); m_world_cam.setTranslation(Vector3D(0, 0, -1)); m_mat = GraphicsEngine::get()->createMaterial(L\"PointLightVertexShader.hlsl\", L\"PointLightPixelShader.hlsl\"); m_mat->addTexture(m_wall_tex); m_mat->setCullMode(CULL_MODE_BACK); } void AppWindow::onUpdate() { Window::onUpdate(); InputSystem::get()->update(); this->render(); } void AppWindow::onDestroy() { Window::onDestroy(); m_swap_chain->setFullscreen(false, 1, 1); } void AppWindow::onFocus() { InputSystem::get()->addListener(this); } void AppWindow::onKillFocus() { InputSystem::get()->removeListener(this); } void AppWindow::onSize() { RECT rc = this->getClientWindowRect(); m_swap_chain->resize(rc.right, rc.bottom); this->render(); } void AppWindow::onKeyDown(int key) { if (!m_play_state) return; if (key == 'W') { //m_rot_x += 3.14f*m_delta_time; m_forward = 1.0f; } else if (key == 'S') { //m_rot_x -= 3.14f*m_delta_time; m_forward = -1.0f; } else if (key == 'A') { //m_rot_y += 3.14f*m_delta_time; m_rightward = -1.0f; } else if (key == 'D') { //m_rot_y -= 3.14f*m_delta_time; m_rightward = 1.0f; } else if (key == 'O') { m_light_radius = (m_light_radius <= 0) ? 0.0f : m_light_radius - 1.0f * m_delta_time; } else if (key == 'P') { m_light_radius += 1.0f * m_delta_time; } } void AppWindow::onKeyUp(int key) { m_forward = 0.0f; m_rightward = 0.0f; if (key == 'G') { m_play_state = (m_play_state) ? false : true; InputSystem::get()->showCursor(!m_play_state); } else if (key == 'F') { m_fullscreen_state = (m_fullscreen_state) ? false : true; RECT size_screen = this->getSizeScreen(); m_swap_chain->setFullscreen(m_fullscreen_state, size_screen.right, size_screen.bottom); } } void AppWindow::onMouseMove(const Point& mouse_pos) { if (!m_play_state) return; int width = (this->getClientWindowRect().right - this->getClientWindowRect().left); int height = (this->getClientWindowRect().bottom - this->getClientWindowRect().top); m_rot_x += (mouse_pos.m_y - (height / 2.0f)) * m_delta_time * 0.1f; m_rot_y += (mouse_pos.m_x - (width / 2.0f)) * m_delta_time * 0.1f; InputSystem::get()->setCursorPosition(Point((int)(width / 2.0f), (int)(height / 2.0f))); } void AppWindow::onLeftMouseDown(const Point& mouse_pos) { m_scale_cube = 0.5f; } void AppWindow::onLeftMouseUp(const Point& mouse_pos) { m_scale_cube = 1.0f; } void AppWindow::onRightMouseDown(const Point& mouse_pos) { m_scale_cube = 2.0f; } void AppWindow::onRightMouseUp(const Point& mouse_pos) { m_scale_cube = 1.0f; } And that's how you do it!","title":"Welcome to Datastorm Engine"},{"location":"#welcome-to-datastorm-engine","text":"","title":"Welcome to Datastorm Engine"},{"location":"#installation-and-building","text":"Install the engine from https://github.com/TrazerX/Datastorm-Engine . Open the DatastormEngine.sln file. Build the engine.","title":"Installation and building"},{"location":"#how-to-make-a-game","text":"To make a game you need to make it in AppWindow class (It is the main game). AppWindow.cpp has a default app in it. There is objects in OnCreate() function which as m_mesh, m_sky_mesh and m_plane_mesh. You can add a mesh by adding MeshPtr to AppWindow.h or you can delete them in onCreate() function. AppWindow.h ... private: MeshPtr m_mesh; AppWindow.cpp OnCreate() Window::onCreate(); { InputSystem::get()->addListener(this); m_play_state = true; InputSystem::get()->showCursor(false); //Texture m_wall_tex = GraphicsEngine::get()->getTextureManager()->createTextureFromFile(L\"..\\\\Assets\\\\Textures\\\\wall.jpg\"); m_mesh = GraphicsEngine::get()->getMeshManager()->createMeshFromFile(L\"..\\\\Assets\\\\Meshes\\\\sphere.obj\"); RECT rc = this->getClientWindowRect(); m_swap_chain = GraphicsEngine::get()->getRenderSystem()->createSwapChain(this->m_hwnd, rc.right - rc.left, rc.bottom - rc.top); m_world_cam.setTranslation(Vector3D(0, 0, -1)); m_mat = GraphicsEngine::get()->createMaterial(L\"PointLightVertexShader.hlsl\", L\"PointLightPixelShader.hlsl\"); m_mat->addTexture(m_wall_tex); m_mat->setCullMode(CULL_MODE_BACK); m_world_cam.setTranslation(Vector3D(0, 0, -2)); } We will talk about m_wall_tex and m_mat later. You can create textures by adding TexturePtr to AppWindow.h or you can delete them like Meshes. AppWindow.h ... private: TexturePtr m_wall_tex; AppWindow.cpp OnCreate() ... m_wall_tex = GraphicsEngine::get()->getTextureManager()->createTextureFromFile(L\"..\\\\Assets\\\\Textures\\\\wall.jpg\"); You can delete or add material to AppWindow.h script then use them in onCreate() function. Here is the example: AppWindow.h ... private: MaterialPtr m_mat; AppWindow.cpp m_mat = GraphicsEngine::get()->createMaterial(L\"PointLightVertexShader.hlsl\", L\"PointLightPixelShader.hlsl\"); m_mat->addTexture(m_wall_tex); m_mat->setCullMode(CULL_MODE_BACK); ... Now to render the model. We need to use updateModel() function and drawMesh() in AppWindow::render() function AppWindow.cpp ... void AppWindow::render() { //CLEAR THE RENDER TARGET GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->clearRenderTargetColor(this->m_swap_chain, 0, 0.3f, 0.4f, 1); //SET VIEWPORT OF RENDER TARGET IN WHICH WE HAVE TO DRAW RECT rc = this->getClientWindowRect(); GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setViewportSize(rc.right - rc.left, rc.bottom - rc.top); //COMPUTE TRANSFORM MATRICES update(); //RENDER THE MODEL updateModel(Vector3D(0, -1, 1), m_mat); drawMesh(m_plane_mesh, m_mat); //REFRESH WITH TIME m_swap_chain->present(true); m_old_delta = m_new_delta; m_new_delta = ::GetTickCount(); m_delta_time = (m_old_delta) ? ((m_new_delta - m_old_delta) / 1000.0f) : 0; m_time += m_delta_time; } So it should be like this. AppWindow.h #pragma once #include \"Window.h\" #include \"GraphicsEngine.h\" #include \"SwapChain.h\" #include \"DeviceContext.h\" #include \"VertexBuffer.h\" #include \"IndexBuffer.h\" #include \"ConstantBuffer.h\" #include \"VertexShader.h\" #include \"PixelShader.h\" #include \"InputListener.h\" #include \"Matrix4x4.h\" class AppWindow : public Window, public InputListener { public: AppWindow(); ~AppWindow(); // Inherited via Window virtual void onCreate() override; virtual void onUpdate() override; virtual void onDestroy() override; virtual void onFocus() override; virtual void onKillFocus() override; virtual void onSize() override; // Inherited via InputListener virtual void onKeyDown(int key) override; virtual void onKeyUp(int key) override; virtual void onMouseMove(const Point& mouse_pos) override; virtual void onLeftMouseDown(const Point& mouse_pos) override; virtual void onLeftMouseUp(const Point& mouse_pos) override; virtual void onRightMouseDown(const Point& mouse_pos) override; virtual void onRightMouseUp(const Point& mouse_pos) override; public: void render(); void update(); void updateModel(Vector3D position, const MaterialPtr& material); void updateCamera(); void updateSkyBox(); void updateLight(); void drawMesh(const MeshPtr& mesh, MaterialPtr& material); private: SwapChainPtr m_swap_chain; VertexShaderPtr m_vs; PixelShaderPtr m_ps; PixelShaderPtr m_sky_ps; ConstantBufferPtr m_cb; ConstantBufferPtr m_sky_cb; TexturePtr m_wall_tex; MeshPtr m_mesh; MaterialPtr m_mat; private: long m_old_delta; long m_new_delta; float m_delta_time; float m_delta_pos; float m_delta_scale; float m_delta_rot; float m_rot_x = 0.0f; float m_rot_y = 0.0f; float m_light_rot_y = 0.0f; float m_scale_cube = 1; float m_forward = 0.0f; float m_rightward = 0.0f; bool cull = true; Matrix4x4 m_world_cam; Matrix4x4 m_view_cam; Matrix4x4 m_proj_cam; float m_time = 0.0f; float m_light_radius = 4.0f; float m_attenuation = 2.0f; bool m_anim = false; bool m_play_state = false; bool m_fullscreen_state = false; Vector4D m_light_position; }; AppWindow.cpp #include \"AppWindow.h\" #include <Windows.h> #include \"Vector3D.h\" #include \"Vector2D.h\" #include \"Matrix4x4.h\" #include \"InputSystem.h\" #include \"Mesh.h\" struct vertex { Vector3D position; Vector2D texcoord; }; __declspec(align(16)) struct constant { Matrix4x4 m_world; Matrix4x4 m_view; Matrix4x4 m_proj; Vector4D m_light_direction; Vector4D m_camera_position; Vector4D m_light_position = Vector4D(0, 1, 0, 0); float m_light_radius = 4.0f; float m_time = 0.0f; }; AppWindow::AppWindow() { } void AppWindow::render() { //CLEAR THE RENDER TARGET GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->clearRenderTargetColor(this->m_swap_chain, 0, 0.3f, 0.4f, 1); //SET VIEWPORT OF RENDER TARGET IN WHICH WE HAVE TO DRAW RECT rc = this->getClientWindowRect(); GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setViewportSize(rc.right - rc.left, rc.bottom - rc.top); //COMPUTE TRANSFORM MATRICES update(); updateModel(Vector3D(0, -1, 1), m_mat); drawMesh(m_mesh, m_mat); m_swap_chain->present(true); m_old_delta = m_new_delta; m_new_delta = ::GetTickCount(); m_delta_time = (m_old_delta) ? ((m_new_delta - m_old_delta) / 1000.0f) : 0; m_time += m_delta_time; } void AppWindow::update() { updateCamera(); updateLight(); updateSkyBox(); } void AppWindow::updateModel(Vector3D position, const MaterialPtr& material) { constant cc; Matrix4x4 m_light_rot_matrix; m_light_rot_matrix.setIdentity(); m_light_rot_matrix.setRotationY(m_light_rot_y); cc.m_world.setIdentity(); cc.m_world.setTranslation(position); cc.m_view = m_view_cam; cc.m_proj = m_proj_cam; cc.m_camera_position = m_world_cam.getTranslation(); cc.m_light_position = m_light_position; cc.m_light_radius = m_light_radius; cc.m_light_direction = m_light_rot_matrix.getZDirection(); cc.m_time = m_time; material->setData(&cc, sizeof(constant)); } void AppWindow::updateCamera() { Matrix4x4 world_cam, temp; world_cam.setIdentity(); temp.setIdentity(); temp.setRotationX(m_rot_x); world_cam *= temp; temp.setIdentity(); temp.setRotationY(m_rot_y); world_cam *= temp; Vector3D new_pos = m_world_cam.getTranslation() + world_cam.getZDirection() * (m_forward * 0.05f); new_pos = new_pos + world_cam.getXDirection() * (m_rightward * 0.05f); world_cam.setTranslation(new_pos); m_world_cam = world_cam; world_cam.inverse(); m_view_cam = world_cam; int width = (this->getClientWindowRect().right - this->getClientWindowRect().left); int height = (this->getClientWindowRect().bottom - this->getClientWindowRect().top); m_proj_cam.setPerspectiveFovLH(1.57f, ((float)width / (float)height), 0.001f, 100.0f); } void AppWindow::updateSkyBox() { constant cc; cc.m_world.setIdentity(); cc.m_world.setScale(Vector3D(100.0f, 100.0f, 100.0f)); cc.m_world.setTranslation(m_world_cam.getTranslation()); cc.m_view = m_view_cam; cc.m_proj = m_proj_cam; } void AppWindow::updateLight() { m_light_rot_y += 1.57f * m_delta_time; float dist_from_origin = 3.0f; m_light_position = Vector4D(cos(m_light_rot_y) * dist_from_origin, 1.1f, sin(m_light_rot_y) * dist_from_origin, 1.0f); } void AppWindow::drawMesh(const MeshPtr& mesh, MaterialPtr& material) { GraphicsEngine::get()->setMaterial(material); //SET THE VERTICES OF THE TRIANGLE TO DRAW GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setVertexBuffer(mesh->getVertexBuffer()); //SET THE INDICES OF THE TRIANGLE TO DRAW GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->setIndexBuffer(mesh->getIndexBuffer()); // FINALLY DRAW THE TRIANGLE GraphicsEngine::get()->getRenderSystem()->getImmediateDeviceContext()->drawIndexedTriangleList(mesh->getIndexBuffer()->getSizeIndexList(), 0, 0); } AppWindow::~AppWindow() { } void AppWindow::onCreate() { Window::onCreate(); InputSystem::get()->addListener(this); m_play_state = true; InputSystem::get()->showCursor(false); m_wall_tex = GraphicsEngine::get()->getTextureManager()->createTextureFromFile(L\"..\\\\Assets\\\\Textures\\\\wall.jpg\"); m_mesh = GraphicsEngine::get()->getMeshManager()->createMeshFromFile(L\"..\\\\Assets\\\\Meshes\\\\sphere.obj\"); RECT rc = this->getClientWindowRect(); m_swap_chain = GraphicsEngine::get()->getRenderSystem()->createSwapChain(this->m_hwnd, rc.right - rc.left, rc.bottom - rc.top); m_world_cam.setTranslation(Vector3D(0, 0, -1)); m_mat = GraphicsEngine::get()->createMaterial(L\"PointLightVertexShader.hlsl\", L\"PointLightPixelShader.hlsl\"); m_mat->addTexture(m_wall_tex); m_mat->setCullMode(CULL_MODE_BACK); } void AppWindow::onUpdate() { Window::onUpdate(); InputSystem::get()->update(); this->render(); } void AppWindow::onDestroy() { Window::onDestroy(); m_swap_chain->setFullscreen(false, 1, 1); } void AppWindow::onFocus() { InputSystem::get()->addListener(this); } void AppWindow::onKillFocus() { InputSystem::get()->removeListener(this); } void AppWindow::onSize() { RECT rc = this->getClientWindowRect(); m_swap_chain->resize(rc.right, rc.bottom); this->render(); } void AppWindow::onKeyDown(int key) { if (!m_play_state) return; if (key == 'W') { //m_rot_x += 3.14f*m_delta_time; m_forward = 1.0f; } else if (key == 'S') { //m_rot_x -= 3.14f*m_delta_time; m_forward = -1.0f; } else if (key == 'A') { //m_rot_y += 3.14f*m_delta_time; m_rightward = -1.0f; } else if (key == 'D') { //m_rot_y -= 3.14f*m_delta_time; m_rightward = 1.0f; } else if (key == 'O') { m_light_radius = (m_light_radius <= 0) ? 0.0f : m_light_radius - 1.0f * m_delta_time; } else if (key == 'P') { m_light_radius += 1.0f * m_delta_time; } } void AppWindow::onKeyUp(int key) { m_forward = 0.0f; m_rightward = 0.0f; if (key == 'G') { m_play_state = (m_play_state) ? false : true; InputSystem::get()->showCursor(!m_play_state); } else if (key == 'F') { m_fullscreen_state = (m_fullscreen_state) ? false : true; RECT size_screen = this->getSizeScreen(); m_swap_chain->setFullscreen(m_fullscreen_state, size_screen.right, size_screen.bottom); } } void AppWindow::onMouseMove(const Point& mouse_pos) { if (!m_play_state) return; int width = (this->getClientWindowRect().right - this->getClientWindowRect().left); int height = (this->getClientWindowRect().bottom - this->getClientWindowRect().top); m_rot_x += (mouse_pos.m_y - (height / 2.0f)) * m_delta_time * 0.1f; m_rot_y += (mouse_pos.m_x - (width / 2.0f)) * m_delta_time * 0.1f; InputSystem::get()->setCursorPosition(Point((int)(width / 2.0f), (int)(height / 2.0f))); } void AppWindow::onLeftMouseDown(const Point& mouse_pos) { m_scale_cube = 0.5f; } void AppWindow::onLeftMouseUp(const Point& mouse_pos) { m_scale_cube = 1.0f; } void AppWindow::onRightMouseDown(const Point& mouse_pos) { m_scale_cube = 2.0f; } void AppWindow::onRightMouseUp(const Point& mouse_pos) { m_scale_cube = 1.0f; } And that's how you do it!","title":"How to make a game?"}]}